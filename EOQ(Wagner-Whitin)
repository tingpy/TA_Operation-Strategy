{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We assume that demand is deterministic and constant with a rate of λ units per year.\n",
    "Stockouts are not allowed—we must always order enough so that demand can be met.\n",
    "Since demand is deterministic, this is a plausible assumption. The lead time is 0—orders\n",
    "are received instantaneously. There is a fixed cost K per order, a purchase cost c per unit\n",
    "ordered, and an inventory holding cost h per unit per year. There is no stockout penalty\n",
    "since stockouts are not allowed.\n",
    "\n",
    "Any optimal solution for the EOQ model has two important properties:\n",
    "    \n",
    "• Zeroinventory\n",
    "ordering (ZIO) property. Since the lead time is 0, it never makes\n",
    "sense to place an order when there is a positive amount of inventory on hand—we\n",
    "only place an order when the inventory level is 0.\n",
    "    \n",
    "• Constant order sizes. If Q is the optimal order size at time 0, it will also be the\n",
    "optimal order size every other time we place an order since the system looks the\n",
    "same every time the inventory level hits 0. Therefore, the order size is the same every\n",
    "time an order is placed.\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EOQ_cost (generic function with 1 method)"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Practice 0\n",
    "function EOQ_cost(lambda, K, h, Q)\n",
    "    cost = (K .* lambda ./ Q) + (h .* Q ./ 2)\n",
    "    return cost\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6-element Vector{Float64}:\n",
       " 68.41666666666666\n",
       " 68.42338709677419\n",
       " 68.5\n",
       " 68.64015151515152\n",
       " 68.83823529411765\n",
       " 69.08928571428572"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lambda = 1300\n",
    "K = 8\n",
    "h = 0.225\n",
    "Q = 300:10:350\n",
    "EOQ_cost(lambda, K, h, Q)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "should emphasize that scalar and vector have different operants (. and w/o .)\n",
    "you will get error if you don't put . before your operants\n",
    "#TWO EXPRESSION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EOQ_cost_and_quantity (generic function with 1 method)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Practice 1 and Practice 2\n",
    "function EOQ_cost_and_quantity(lambda, K, h)\n",
    "    quantity = sqrt.(2 .* K .* lambda ./ h)\n",
    "    cost = h .* quantity\n",
    "    return quantity, cost\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([129.09944487358058, 154.91933384829667], [387.29833462074174, 774.5966692414834])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EOQ_cost_and_quantity([1000,2000], [25,30], [3,5])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EOQ_cost_and_quantity2 (generic function with 1 method)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function EOQ_cost_and_quantity2(lambda, K, h)\n",
    "    quantity = sqrt(2 * K * lambda / h)\n",
    "    cost = h * quantity\n",
    "    return quantity, cost\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2-element Vector{Tuple{Float64, Float64}}:\n",
       " (129.09944487358058, 387.29833462074174)\n",
       " (154.91933384829667, 774.5966692414834)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "EOQ_cost_and_quantity2.([1000,2000], [25,30], [3,5])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Practice 3\n",
    "\n",
    "INPUT ARGUMENTS: <br>\n",
    "   lambda  = demand rate [scalar or vector] <br>\n",
    "   K       = fixed cost [scalar or vector] <br>\n",
    "   i       = holding rate as % [scalar or vector] <br>\n",
    "   b       = breakpoints b_1,...,b_n [n-vector or n x m matrix] (m = # of instances) <br>\n",
    "   c       = purchase prices c_0,...,c_n [(n+1)-vector or (n+1) x m matrix] <br>\n",
    "   n       = number of breakpoints [scalar or vector] <br>\n",
    "<br>\n",
    "OUTPUT ARGUMENTS: <br>\n",
    "   Q       = optimal order quantity [scalar or vector] <br>\n",
    "   g       = cost g(Q) [scalar or vector] <br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EOQ_AllUnitDiscount (generic function with 1 method)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function EOQ_AllUnitDiscount(lambda, K, i, b, c, n)\n",
    "    m = length(lambda)\n",
    "    \n",
    "    # store results for best quantity and best cost\n",
    "    Q = zeros(1, m)\n",
    "    g = zeros(1, m)\n",
    "    \n",
    "    b_with0 = [zeros(1, m); b]\n",
    "    \n",
    "    for t in 1:m\n",
    "        Qstar = sqrt.(2 .* K[t] .* lambda[t] ./ (i[t] .* c[:,t]))\n",
    "        jstar = 0\n",
    "        bestg = 0\n",
    "        bestQ = 0\n",
    "        \n",
    "        for j in (n[t]+1):-1:1\n",
    "            if j == n[t]+1\n",
    "                realizable = (Qstar[j] >= b_with0[j,t])\n",
    "            else\n",
    "                realizable = ( (Qstar[j] >= b_with0[j,t]) & (Qstar[j] < b_with0[j+1,t]) )\n",
    "            end\n",
    "            \n",
    "            if realizable \n",
    "                tempg = c[j,t] * lambda[t] + K[t] * lambda[t] / Qstar[j] + i[t] * c[j,t] * Qstar[j] / 2;\n",
    "                        \n",
    "                bestg = tempg;\n",
    "                bestQ = Qstar[j];\n",
    "                \n",
    "                jstar = j;\n",
    "                break;\n",
    "            end\n",
    "        end\n",
    "        \n",
    "        for j in (jstar+1):(n[t]+1)\n",
    "            tempg = c[j,t] * lambda[t] + K[t] * lambda[t] / b_with0[j,t] + i[t] * c[j,t] * b_with0[j,t] / 2\n",
    "            if tempg < bestg\n",
    "                bestg = tempg\n",
    "                bestQ = b_with0[j,t]\n",
    "            end\n",
    "        end\n",
    "\n",
    "        Q[t] = bestQ;\n",
    "        g[t] = bestg;\n",
    "        \n",
    "    end\n",
    "\n",
    "    return Q, g\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([200.0 547.7225575051662 135.0 65.27912098338669], [3392.0 386.79503017546494 2072.871111111111 365.95650117230423])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lambda = [380 1125 150 100]\n",
    "K = [80 12 100 15]\n",
    "i = [0.25 0.30 0.16 0.22]\n",
    "n = [3 2 3 2]\n",
    "b = [100 200 300; 400 500 0; 115 125 135; 60 250 0]'\n",
    "c = [10 9 8 7.9; 0.6 0.4 0.3 0; 15 13.8 12.6 12.2; 4 3.2 3 0]'\n",
    "\n",
    "EOQ_AllUnitDiscount(lambda, K, i, b, c, n)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.6.1",
   "language": "julia",
   "name": "julia-1.6"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
